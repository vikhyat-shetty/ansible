---
- name: Check OS distribution
  ansible.builtin.setup:
    filter: ansible_distribution

- name: Update apt package and Install necessary packages for Debian/Ubuntu
  include_tasks: "../../prometheus/tasks/debian_ubuntu.yml"
  when: (ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Ubuntu') and airgapped_installation_mode == "false" 

- name: Update yum package and Install necessary packages for CentOS/RHEL
  include_tasks: "../../prometheus/tasks/centos_redhat.yml"
  when: (ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Ubuntu') and airgapped_installation_mode == "false" 

- name: Download Grafana
  when: airgapped_installation_mode == "false"
  get_url:
    url: "https://dl.grafana.com/oss/release/grafana-{{ grafana_version }}.linux-amd64.tar.gz"
    dest: "/tmp/grafana.tar.gz"

- name: Copy Grafana package to desination (Air gapped mode)
  when: airgapped_installation_mode == "true"
  ansible.builtin.copy:
    src: "{{ grafana_archive_file_source }}"
    dest: /tmp/
  
- name: Rename Grafana tar file to grafana.tar.gz
  when: airgapped_installation_mode == "true"
  command: mv /tmp/grafana-{{ grafana_version }}.linux-amd64.tar.gz /tmp/grafana.tar.gz

- name: Install Grafana
  become: yes
  become_user: root
  shell: |
    cd /tmp/
    tar xvfz grafana.tar.gz
    grafana_dir=$(find . -maxdepth 1 -type d -name "grafana-*" -exec basename {} \;)
    cp -r "$grafana_dir" {{ grafana_install_dir }}

- name: Setup Prometheus Service File
  template:
    src: grafana.service.j2
    dest: /etc/systemd/system/grafana.service

- name: Create the grafana user
  user:
    name: "{{ grafana_user }}"
    state: present

- name: Create the grafana group
  group:
    name: "{{ grafana_group }}"
    state: present

# Checks if the required Grafana directories exists. Creates if it doesnt and set ownership and permissions

- block:
  - name: "Checking grafana folders"
    stat:
      path: "{{item}}"
    register: folder_stats
    with_items:
      - {{ grafana_install_dir }}/conf/provisioning
      - {{ grafana_install_dir }}/data/log
      - /var/log/grafana
  - name: "Creating multiple folders without disturbing previous permissions"
    file:
      path: "{{item.item}}"
      state: directory
      mode: 0755
      group: "{{ grafana_group }}"
      owner: "{{ grafana_user }}"
      recurse: yes
    become: yes
    when: item.stat.exists == false
    with_items:
    - "{{folder_stats.results}}"

- name: Add Custom grafana dashboard
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ grafana_install_dir }}/conf/provisioning/dashboards/"
  loop: "{{ grafana_custom_dashboards }}"
  when: grafana_custom_dashboards is defined

# For testing purpose
- name: Copy Grafana Dashboard
  copy:
    src: grafana/provisioning
    dest: "{{ grafana_install_dir }}/conf/"

- name: Configure Grafana dashboard location
  template: 
    src: dashboard.yml.j2
    dest: "{{ grafana_install_dir }}/conf/provisioning/dashboards/dashboard.yml"

- name: Configure Grafana datasource
  template:
    src: datasource.yml.j2
    dest: "{{ grafana_install_dir }}/conf/provisioning/datasources/datasource.yml"

- name: Delete Grafana tmp folder
  file:
    path: /tmp/$grafana_dir
    state: absent

- name: Configure SSL
  include_tasks: ssl.yml
  when: grafana_ssl_enabled == "true"

- name: Reload systemd daemon
  become: yes
  become_user: root
  shell: systemctl daemon-reload

- name: Start and enable Grafana service
  systemd:
    name: grafana
    state: restarted
    enabled: yes